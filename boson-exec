#!/usr/bin/env python3

import sys
import os
import logging
from pprint import pprint as pp

import yaml

import boson.tasks as tasks

DEBUG = True


class ScriptRunner(object):
    """Understands how to parse and execute boson scripts"""

    def __init__(self):
        pass

    def interpret(self, script):
        # TODO: validate script syntax
        for task in script:
            self.dispatch(task)

    def dispatch(self, task_definition):
        if not DEBUG:
            try:
                task_class = getattr(
                    tasks, self._task_name(task_definition['task']))
            except AttributeError as e:
                logging.error('Invalid Task: ' + task_definition['task'])
                return

            try:
                task = task_class(task_definition)
                logging.info('EXECUTING: ' + task_definition['description'])
                task.execute()
            except Exception as err:
                logging.error('Failed to execute task: ' +
                              task_definition['description'])
                logging.debug(str(type(err)) + ': ' + str(err.args))
                return
        else:
            # Switch off exception handling to get a decent stack trace
            task_class = getattr(
                tasks, self._task_name(task_definition['task']))
            task = task_class(task_definition)
            logging.info('EXECUTING: ' + task_definition['description'])
            task.execute()

    def _task_name(self, name):
        parts = name.split('-')
        task_name = [s.capitalize() for s in parts]
        return ''.join(task_name)


if __name__ == "__main__":
    loglevel = getattr(logging, os.getenv('BOSON_LOGLEVEL', 'INFO'))
    logging.basicConfig(level=loglevel)
    # logging.getLogger('sqlalchemy.engine').setLevel(logging.INFO)

    with open(sys.argv[1], 'r') as f:
        script = yaml.load(f)

    s = ScriptRunner()
    s.interpret(script)
    logging.shutdown()
